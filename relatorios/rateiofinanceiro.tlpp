#include "msobject.ch"
#include "totvs.framework.treports.integratedprovider.th"
#include "tlpp-core.th"
#include "tlpp-rest.th"
#include "rateiofinanceiro.ch"

namespace custom.financeiro.rateiointegratedprovider

@totvsFrameworkTReportsIntegratedProvider(active=.T., team="SIGAFIN", tables="CN9, CNA, CNB, CTJ", name="Validacao Rateio Financeiro", country="ALL", initialRelease="12.1.2210")
class RateioFinanceiroTReportsBusinessObject from totvs.framework.treports.integratedprovider.IntegratedProvider
    public method new() as object
    public method getAreas() as array
    public method getDescription() as character
    public method getData() as object
    public method getSchema() as object
endclass

//-------------------------------------------------------------------
/*{Protheus.doc} New
Metodo de instancia da classe.
*/
//-------------------------------------------------------------------
method new() as object class RateioFinanceiroTReportsBusinessObject
    _Super:new()
    self:setDisplayName(STR0001)//"Validacao Rateio Financeiro"
    self:setDescription(STR0002)//"Relatorio para validacao de rateio"
    self:setPergunte("FINRATE")
return self

//-------------------------------------------------------------------
/*{Protheus.doc} getDescription
Retorna a descricao do objeto de negocio.
*/
//-------------------------------------------------------------------
method getDescription() as character class RateioFinanceiroTReportsBusinessObject
return STR0002

method getAreas() as array class RateioFinanceiroTReportsBusinessObject
return {STR0003}//"Financeiro"

//-------------------------------------------------------------------
/*{Protheus.doc} getData
Gera os dados do relatorio aplicando validacoes de rateio financeiro.
*/
//-------------------------------------------------------------------
method getData(nPage as numeric, oFilter as object) as object class RateioFinanceiroTReportsBusinessObject
    local cAlias    as character
    local cQuery    as character
    local cClassCC  as character
    local cStatusCC as character
    local cStatusCt as character
    local jParams   as json
    local nCount    := 0 as numeric

    self:setPageSize(50)
    jParams := oFilter:getParameters()

    cQuery := "SELECT CN9.CN9_FILIAL, CN9.CN9_NUMERO, CN9.CN9_TPCTO, CN9.CN9_REVISA, CN9.CN9_DTREV, CN9.CN9_DTINIC, CN9.CN9_DTFIM, "
    cQuery +=        "CTJ.CTJ_RATEIO, CTJ.CTJ_DEBITO, CTJ.CTJ_CCD, CN9.CN9_SITUAC, CNA.CNA_VLTOT, CNA.CNA_SALDO, CNA.CNA_FORNEC, CNA.CNA_NATURE, "
    cQuery +=        "CNB.CNB_PRODUT, CNB.CNB_QUANT, CNB.CNB_VLUNIT, CNB.CNB_VLTOT "
    cQuery += "FROM " + RetSqlName("CN9") + " CN9 "
    cQuery += "INNER JOIN " + RetSqlName("CNA") + " CNA ON CNA.CNA_FILIAL = CN9.CN9_FILIAL AND CNA.CNA_NUMERO = CN9.CN9_NUMERO AND CNA.D_E_L_E_T_ = ' ' "
    cQuery += "INNER JOIN " + RetSqlName("CNB") + " CNB ON CNB.CNB_FILIAL = CNA.CNA_FILIAL AND CNB.CNB_NUMERO = CNA.CNA_NUMERO AND CNB.CNB_SEQ = CNA.CNA_SEQ AND CNB.D_E_L_E_T_ = ' ' "
    cQuery += "LEFT JOIN "  + RetSqlName("CTJ") + " CTJ ON CTJ.CTJ_CONTRA = CN9.CN9_NUMERO AND CTJ.D_E_L_E_T_ = ' ' "

    if oFilter:hasFilter()
        cQuery += "WHERE " + oFilter:getSQLExpression()
    endif

    cAlias := MPSysOpenQuery(cQuery)
    if nPage == 1
        (cAlias)->(DBGoTop())
    else
        (cAlias)->(DBSkip((nPage-1)*self:getPageSize()))
    endif

    while !(cAlias)->(Eof())
        cClassCC  := GetContaClass((cAlias)->CTJ_CCD)
        cStatusCC := iif(Empty((cAlias)->CTJ_CCD), "INCONSISTENTE", "OK")
        cStatusCt := iif(Empty((cAlias)->CTJ_DEBITO), "INCONSISTENTE", "OK")

        self:oData:appendData({;
            "CN9_FILIAL": (cAlias)->CN9_FILIAL,;
            "CN9_NUMERO": (cAlias)->CN9_NUMERO,;
            "CN9_TPCTO": (cAlias)->CN9_TPCTO,;
            "CN9_REVISA": (cAlias)->CN9_REVISA,;
            "CN9_DTREV": FwTimeStamp(5, sToD((cAlias)->CN9_DTREV), "00:00:00"),;
            "CN9_DTINIC": FwTimeStamp(5, sToD((cAlias)->CN9_DTINIC), "00:00:00"),;
            "CN9_DTFIM": FwTimeStamp(5, sToD((cAlias)->CN9_DTFIM), "00:00:00"),;
            "CTJ_RATEIO": (cAlias)->CTJ_RATEIO,;
            "CTJ_DEBITO": (cAlias)->CTJ_DEBITO,;
            "CTJ_CCD": (cAlias)->CTJ_CCD,;
            "CLASS_CONTACC": cClassCC,;
            "STS_CENTRO": cStatusCC,;
            "STS_CONTA": cStatusCt,;
            "CN9_SITUAC": (cAlias)->CN9_SITUAC,;
            "CNA_VLTOT": (cAlias)->CNA_VLTOT,;
            "CNA_SALDO": (cAlias)->CNA_SALDO,;
            "CNA_FORNEC": (cAlias)->CNA_FORNEC,;
            "CNA_NATURE": (cAlias)->CNA_NATURE,;
            "CNB_PRODUT": (cAlias)->CNB_PRODUT,;
            "CNB_QUANT": (cAlias)->CNB_QUANT,;
            "CNB_VLUNIT": (cAlias)->CNB_VLUNIT,;
            "CNB_VLTOT": (cAlias)->CNB_VLTOT })

        (cAlias)->(DBSkip())
        nCount++
        if nCount == self:getPageSize()
            exit
        endif
    enddo

    self:setHasNext(!(cAlias)->(Eof()))
    (cAlias)->(DBCloseArea())

return self:oData

//-------------------------------------------------------------------
/*{Protheus.doc} getSchema
Define o schema de retorno do relatorio.
*/
//-------------------------------------------------------------------
method getSchema() as object class RateioFinanceiroTReportsBusinessObject
    self:oSchema:aliasToSchema("CN9", "CN9_FILIAL")
    self:oSchema:aliasToSchema("CN9", "CN9_NUMERO")
    self:oSchema:aliasToSchema("CN9", "CN9_TPCTO")
    self:oSchema:aliasToSchema("CN9", "CN9_REVISA")
    self:oSchema:aliasToSchema("CN9", "CN9_DTREV")
    self:oSchema:aliasToSchema("CN9", "CN9_DTINIC")
    self:oSchema:aliasToSchema("CN9", "CN9_DTFIM")
    self:oSchema:aliasToSchema("CTJ", "CTJ_RATEIO")
    self:oSchema:aliasToSchema("CTJ", "CTJ_DEBITO")
    self:oSchema:aliasToSchema("CTJ", "CTJ_CCD")
    self:oSchema:addProperty("CLASS_CONTACC", "Classif. CC", "string", "Classif.CC", "CLASS_CONTACC")
    self:oSchema:addProperty("STS_CENTRO", "Status CC", "string", "Status CC", "STS_CENTRO")
    self:oSchema:addProperty("STS_CONTA", "Status Conta", "string", "Status Conta", "STS_CONTA")
    self:oSchema:aliasToSchema("CN9", "CN9_SITUAC")
    self:oSchema:aliasToSchema("CNA", "CNA_VLTOT")
    self:oSchema:aliasToSchema("CNA", "CNA_SALDO")
    self:oSchema:aliasToSchema("CNA", "CNA_FORNEC")
    self:oSchema:aliasToSchema("CNA", "CNA_NATURE")
    self:oSchema:aliasToSchema("CNB", "CNB_PRODUT")
    self:oSchema:aliasToSchema("CNB", "CNB_QUANT")
    self:oSchema:aliasToSchema("CNB", "CNB_VLUNIT")
    self:oSchema:aliasToSchema("CNB", "CNB_VLTOT")
return self:oSchema

//-------------------------------------------------------------------
/*{Protheus.doc} GetContaClass
Classifica o centro de custo conforme regra de inicio.
*/
//-------------------------------------------------------------------
static function GetContaClass(cCentro as character) as character
    local cRet := "" as character

    do case
        case SubStr(cCentro,1,1) == "4"
            cRet := "Conta de custo"
        case SubStr(cCentro,1,1) == "5"
            cRet := "Conta Comercial"
        case SubStr(cCentro,1,1) == "6"
            cRet := "Conta Administrativa"
    endcase
return cRet


